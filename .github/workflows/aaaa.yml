name: Build by thanhtv

on:
  workflow_dispatch:

jobs:
  build-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repos
        uses: actions/checkout@main

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: true

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # - name: Decrypt XML file
      #   run: |
      #     openssl enc -aes-256-cbc -d -pbkdf2 -iter 100000 \
      #     -in my_files/thanhtvEn.xml \
      #     -out my_files/testkey.xml \
      #     -pass pass:${{ secrets.ENCRYPTION_KEY }}
        
      - name: Build with Gradle
        id: build
        run: |
          sudo apt-get install -y xmlstarlet
          sudo timedatectl set-timezone Asia/Ho_Chi_Minh
          
          # Tạo biến môi trường
          echo "TAG=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "SHA=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          DATE=$(date +'%Y-%m-%d %H:%M:%S')
          echo "DATE=$DATE" >> $GITHUB_OUTPUT
          
          json_url="https://raw.githubusercontent.com/chiteroman/PlayIntegrityFix/main/module/pif.json"
          json_content=$(curl -k  "$json_url")
          ID=$(echo "$json_content" | jq -r '.ID')
          BRAND=$(echo "$json_content" | jq -r '.BRAND')
          DEVICE=$(echo "$json_content" | jq -r '.DEVICE')
          FINGERPRINT=$(echo "$json_content" | jq -r '.FINGERPRINT')
          MANUFACTURER=$(echo "$json_content" | jq -r '.MANUFACTURER')
          MODEL=$(echo "$json_content" | jq -r '.MODEL')
          PRODUCT=$(echo "$json_content" | jq -r '.PRODUCT')
          SECURITY_PATCH=$(echo "$json_content" | jq -r '.SECURITY_PATCH')
          
          echo "ID: $ID"
          echo "BRAND: $BRAND"
          echo "DEVICE: $DEVICE"
          echo "FINGERPRINT: $FINGERPRINT"
          echo "MANUFACTURER: $MANUFACTURER"
          echo "MODEL: $MODEL"
          echo "PRODUCT: $PRODUCT"
          echo "SECURITY_PATCH: $SECURITY_PATCH"

          android_java="app/src/main/java/com/android/internal/util/framework/Android.java"
          sed -i "s/map.put(\"MANUFACTURER\", \".*\");/map.put(\"MANUFACTURER\", \"$MANUFACTURER\");/" "$android_java"
          sed -i "s/map.put(\"MODEL\", \".*\");/map.put(\"MODEL\", \"$MODEL\");/" "$android_java"
          sed -i "s|map.put(\"FINGERPRINT\", \".*\");|map.put(\"FINGERPRINT\", \"$FINGERPRINT\");|" "$android_java"
          sed -i "s/map.put(\"BRAND\", \".*\");/map.put(\"BRAND\", \"$BRAND\");/" "$android_java"
          sed -i "s/map.put(\"PRODUCT\", \".*\");/map.put(\"PRODUCT\", \"$PRODUCT\");/" "$android_java"
          sed -i "s/map.put(\"DEVICE\", \".*\");/map.put(\"DEVICE\", \"$DEVICE\");/" "$android_java"
          sed -i "s/map.put(\"ID\", \".*\");/map.put(\"ID\", \"$ID\");/" "$android_java"
          sed -i "s/map.put(\"SECURITY_PATCH\", \".*\");/map.put(\"SECURITY_PATCH\", \"$SECURITY_PATCH\");/" "$android_java"
          echo "Các giá trị đã được cập nhật trong $android_java"
          cat $android_java
          
          keybox=app/src/main/java/com/android/internal/util/framework/Keybox.java
          # cat $keybox

          ./gradlew clean assembleRelease
          # Kiểm tra và sao chép tệp dex
          DexFile=$(find app/build/intermediates/dex/release/ -name 'classes.dex')
          if [ -z "$DexFile" ]; then
              echo "Error: No dex file found."
              exit 1
          fi
          
          # Sao chép tệp dex vào thư mục out
          mkdir -p outdex
          sudo mv "$DexFile" outdex/default.dex


          # Clone repository
          git clone --depth 1 https://github.com/tryigit/PlayIntegrityFix.git
          
          sudo chmod 777 -R ./*
          
          # Duyệt qua các tệp XML và thực hiện thay thế
          for XML_FILE in "my_files/"*.xml; do
            # Lấy thông tin từ tệp XML
            NumberOfKeyboxes=$(xmlstarlet sel -t -v "//NumberOfKeyboxes" "$XML_FILE")
            DeviceID=$(xmlstarlet sel -t -v "//Keybox/@DeviceID" "$XML_FILE")
            PrivateKeyEcdsa=$(xmlstarlet sel -t -v "//Key[@algorithm='ecdsa']/PrivateKey" "$XML_FILE")
            PrivateKeyRsa=$(xmlstarlet sel -t -v "//Key[@algorithm='rsa']/PrivateKey" "$XML_FILE")
            NumberOfCertificatesEcdsa=$(xmlstarlet sel -t -v "//Key[@algorithm='ecdsa']/CertificateChain/NumberOfCertificates" "$XML_FILE")
            NumberOfCertificatesRsa=$(xmlstarlet sel -t -v "//Key[@algorithm='rsa']/CertificateChain/NumberOfCertificates" "$XML_FILE")
            
            CertificateEcdsa1=$(xmlstarlet sel -t -v "//Key[@algorithm='ecdsa']/CertificateChain/Certificate[1]" "$XML_FILE")
            CertificateEcdsa2=$(xmlstarlet sel -t -v "//Key[@algorithm='ecdsa']/CertificateChain/Certificate[2]" "$XML_FILE")
            if [ "$NumberOfCertificatesEcdsa" -eq 3 ]; then
              CertificateEcdsa3=$(xmlstarlet sel -t -v "//Key[@algorithm='ecdsa']/CertificateChain/Certificate[3]" "$XML_FILE")
            fi
            CertificateRsa1=$(xmlstarlet sel -t -v "//Key[@algorithm='rsa']/CertificateChain/Certificate[1]" "$XML_FILE")
            CertificateRsa2=$(xmlstarlet sel -t -v "//Key[@algorithm='rsa']/CertificateChain/Certificate[2]" "$XML_FILE")
            if [ "$NumberOfCertificatesRsa" -eq 3 ]; then
              CertificateRsa3=$(xmlstarlet sel -t -v "//Key[@algorithm='rsa']/CertificateChain/Certificate[3]" "$XML_FILE")
            fi
            
            base_name_xml=$(basename "$XML_FILE" .xml)
            echo "File: $base_name_xml"

            cp -f my_files/Keybox_template.java $keybox
            awk -v key="$PrivateKeyEcdsa" '{gsub(/^\s*PLACEHOLDER_EC_PRIVATE_KEY/, key); print}' "$keybox" >temp && mv temp "$keybox"
            awk -v key="$CertificateEcdsa1" '{gsub(/^\s*PLACEHOLDER_EC_CERTIFICATE_1/, key); print}' "$keybox" >temp && mv temp "$keybox"
            awk -v key="$CertificateEcdsa2" '{gsub(/^\s*PLACEHOLDER_EC_CERTIFICATE_2/, key); print}' "$keybox" >temp && mv temp "$keybox"
            if [ "$NumberOfCertificatesEcdsa" -eq 3 ]; then
              awk -v key="$CertificateEcdsa3" '{gsub(/^\s*PLACEHOLDER_EC_CERTIFICATE_3/, key); print}' "$keybox" >temp && mv temp "$keybox"
            fi

            awk -v key="$PrivateKeyRsa" '{gsub(/^\s*PLACEHOLDER_RSA_PRIVATE_KEY/, key); print}' "$keybox" >temp && mv temp "$keybox"
            awk -v key="$CertificateRsa1" '{gsub(/^\s*PLACEHOLDER_RSA_CERTIFICATE_1/, key); print}' "$keybox" >temp && mv temp "$keybox"
            awk -v key="$CertificateRsa2" '{gsub(/^\s*PLACEHOLDER_RSA_CERTIFICATE_2/, key); print}' "$keybox" >temp && mv temp "$keybox"
            if [ "$NumberOfCertificatesRsa" -eq 3 ]; then
              awk -v key="$CertificateRsa3" '{gsub(/^\s*PLACEHOLDER_RSA_CERTIFICATE_3/, key); print}' "$keybox" >temp && mv temp "$keybox"
            fi
            echo "Đã thay thế!!"

            # Chạy Gradle
            ./gradlew clean assembleRelease >/dev/null 2>&1

            # Kiểm tra và sao chép tệp dex
            DexFile=$(find app/build/intermediates/dex/release/ -name 'classes.dex')
            if [ -z "$DexFile" ]; then
                echo "Error: No dex file found."
                exit 1
            fi
            # cat $keybox
            # Sao chép tệp dex vào thư mục out
            mkdir -p outdex
            sudo mv "$DexFile" outdex/"$base_name_xml".dex
          done

      - name: Uploading release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ steps.build.outputs.DATE }}
          body: "Commit: ${{ steps.build.outputs.SHA }}"
          tag_name: ${{ steps.build.outputs.TAG }}
          files: outdex/*.dex
          
