name: Build auto

on:
  # push:
  #   branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Checkout source
        run: |
          git remote add upstream https://github.com/chiteroman/FrameworkPatch.git
          git fetch upstream main
          git checkout upstream/main

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: true

      - name: Grant Execute Permission for Gradlew
        run: chmod +x gradlew

      - name: Install XMLStarlet
        run: sudo apt-get install -y xmlstarlet

      - name: Setup Environment Variables
        run: |
          echo "TAG=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "DATE=$(git show --format=%cs | head -n1)" >> $GITHUB_ENV

      - name: Clone PlayIntegrityFix Repository
        run: git clone --depth 1 https://github.com/tryigit/PlayIntegrityFix.git

      - name: Process XML Files and Build
        id: build
        run: |
          XML_DIR="PlayIntegrityFix/Leaked Keyboxs"
          OUTPUT_DIR="out"
          mkdir -p "$OUTPUT_DIR"

          for XML_FILE in "$XML_DIR"/*/*.xml; do
            if [ ! -f "$XML_FILE" ]; then
              echo "No XML files found in $XML_DIR."
              exit 1
            fi

            # Extract XML data
            NumberOfKeyboxes=$(xmlstarlet sel -t -v "//NumberOfKeyboxes" "$XML_FILE")
            DeviceID=$(xmlstarlet sel -t -v "//Keybox/@DeviceID" "$XML_FILE")
            PrivateKeyEcdsa=$(xmlstarlet sel -t -v "//Key[@algorithm='ecdsa']/PrivateKey" "$XML_FILE")
            PrivateKeyRsa=$(xmlstarlet sel -t -v "//Key[@algorithm='rsa']/PrivateKey" "$XML_FILE")
            NumberOfCertificatesEcdsa=$(xmlstarlet sel -t -v "//Key[@algorithm='ecdsa']/CertificateChain/NumberOfCertificates" "$XML_FILE")
            CertificateEcdsa1=$(xmlstarlet sel -t -v "//Key[@algorithm='ecdsa']/CertificateChain/Certificate[1]" "$XML_FILE")
            CertificateEcdsa2=$(xmlstarlet sel -t -v "//Key[@algorithm='ecdsa']/CertificateChain/Certificate[2]" "$XML_FILE")
            CertificateEcdsa3=$(xmlstarlet sel -t -v "//Key[@algorithm='ecdsa']/CertificateChain/Certificate[3]" "$XML_FILE")
            NumberOfCertificatesRsa=$(xmlstarlet sel -t -v "//Key[@algorithm='rsa']/CertificateChain/NumberOfCertificates" "$XML_FILE")
            CertificateRsa1=$(xmlstarlet sel -t -v "//Key[@algorithm='rsa']/CertificateChain/Certificate[1]" "$XML_FILE")
            CertificateRsa2=$(xmlstarlet sel -t -v "//Key[@algorithm='rsa']/CertificateChain/Certificate[2]" "$XML_FILE")
            CertificateRsa3=$(xmlstarlet sel -t -v "//Key[@algorithm='rsa']/CertificateChain/Certificate[3]" "$XML_FILE")

            # Validate extracted data
            if [ -z "$PrivateKeyEcdsa" ] || [ -z "$PrivateKeyRsa" ]; then
              echo "Error: Missing private key in $XML_FILE."
              continue
            fi

            # Replace placeholders and build
            sed -e "s/PLACEHOLDER_EC_PRIVATE_KEY/$PrivateKeyEcdsa/g" \
                -e "s/PLACEHOLDER_RSA_PRIVATE_KEY/$PrivateKeyRsa/g" \
                -e "s/PLACEHOLDER_EC_CERTIFICATE_1/$CertificateEcdsa1/g" \
                -e "s/PLACEHOLDER_EC_CERTIFICATE_2/$CertificateEcdsa2/g" \
                -e "s/PLACEHOLDER_EC_CERTIFICATE_3/$CertificateEcdsa3/g" \
                -e "s/PLACEHOLDER_RSA_CERTIFICATE_1/$CertificateRsa1/g" \
                -e "s/PLACEHOLDER_RSA_CERTIFICATE_2/$CertificateRsa2/g" \
                -e "s/PLACEHOLDER_RSA_CERTIFICATE_3/$CertificateRsa3/g" \
                Keybox_template.java > app/src/main/java/com/android/internal/util/framework/Keybox.java

            # Run Gradle build
            ./gradlew clean assembleRelease

            # Check and copy .dex file
            DexFile=$(find app/build/intermediates/dex/release/ -name 'classes.dex')
            if [ -z "$DexFile" ]; then
              echo "Error: No dex file found."
              exit 1
            fi
            cp -f "$DexFile" "$OUTPUT_DIR/$(basename "$XML_FILE" .xml).dex"
          done

      - name: Upload Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ env.DATE }}
          body: "Commit: ${{ env.SHA }}"
          tag_name: ${{ env.TAG }}
          files: out/*.dex
          
